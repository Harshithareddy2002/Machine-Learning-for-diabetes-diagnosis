# -*- coding: utf-8 -*-
"""Machine Learning for Diabetes Diagnosis .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19yMlV_f3cB1dA2Hju6FLvZ7p2YWaGlL_
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import confusion_matrix, accuracy_score, ConfusionMatrixDisplay

#SVM ALGORITHM

"""# SVM ALGORITHM"""

import pandas as pd

df=pd.read_csv("/content/drive/MyDrive/diabetes.csv")

# Exploratory Data Analysis (EDA) - Feature Distribution
plt.figure(figsize=(12, 10))
df.hist(figsize=(12, 10), bins=20, edgecolor="black")
plt.suptitle("Feature Distributions", fontsize=16)
plt.show()

# Correlation Heatmap
plt.figure(figsize=(10, 6))
sns.heatmap(df.corr(), annot=True, cmap="coolwarm", fmt=".2f", linewidths=0.5)
plt.title("Feature Correlation Heatmap")
plt.show()

df

# Prepare Data
x = df.iloc[:, :-1].values  # Features
y = df.iloc[:, -1].values   # Target
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=0)

# Standardization
sc = StandardScaler()
x_train = sc.fit_transform(x_train)
x_test = sc.transform(x_test)

# Train Models
svc = SVC(kernel="linear", random_state=0)
svc.fit(x_train, y_train)
knn = KNeighborsClassifier(n_neighbors=3, metric="euclidean")
knn.fit(x_train, y_train)
dtc = DecisionTreeClassifier(random_state=0)
dtc.fit(x_train, y_train)

# Predictions
y_pred_svc = svc.predict(x_test)
y_pred_knn = knn.predict(x_test)
y_pred_dtc = dtc.predict(x_test)

# Accuracy Scores
accuracy_svc = accuracy_score(y_test, y_pred_svc)
accuracy_knn = accuracy_score(y_test, y_pred_knn)
accuracy_dtc = accuracy_score(y_test, y_pred_dtc)

# Model Accuracy Comparison
models = ["SVM", "KNN", "Decision Tree"]
accuracy_scores = [accuracy_svc, accuracy_knn, accuracy_dtc]
plt.figure(figsize=(8, 5))
sns.barplot(x=models, y=accuracy_scores, palette="viridis")
plt.xlabel("Model")
plt.ylabel("Accuracy Score")
plt.title("Comparison of Model Accuracy")
plt.ylim(0.6, 1.0)
plt.show()

# Confusion Matrix for SVM
cm_svc = confusion_matrix(y_test, y_pred_svc)
disp_svc = ConfusionMatrixDisplay(confusion_matrix=cm_svc)
disp_svc.plot(cmap="Blues")
plt.title("Confusion Matrix - SVM Model")
plt.show()

# Feature Importance (Decision Tree)
feature_importance = dtc.feature_importances_
feature_names = df.columns[:-1]
plt.figure(figsize=(10, 6))
sns.barplot(x=feature_importance, y=feature_names, palette="coolwarm")
plt.xlabel("Feature Importance")
plt.ylabel("Feature Name")
plt.title("Feature Importance in Decision Tree Model")
plt.show()

